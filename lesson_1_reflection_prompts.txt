How did viewing a diff between two versions of a file help you see the bug that
was introduced?

Once the "changed" lines of code were identified, it was easy to spot the error.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Tracking down errors created since your last functional version could be much easier by looking
and the changes since that version.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

The biggest con is that you could forget to commit after too many changes have been made, producing
a less useful commit to be diffed.  A pro is that you can choose to commit at logical stopping points
instead of time-based or break-based.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git is designed for programming (i.e. multiple files) whereas Google Docs is more a word
processor (i.e. one file).

How can you use the commands git log and git diff to view the history of files?

 git log allows you to identify the various commits and review the comments that were used to
 describe them.  Once two commits are identified to compare, use git diff to identify the specific
 changes that were made to the lines of code.

How might using version control make you more confident to make changes that
could break something?

Being able to revert back to a pre-broken state will make me a more confident programmer.

Now that you have your workspace set up, what do you want to try using Git for?

I'll be using git bash for all of my development projects.
